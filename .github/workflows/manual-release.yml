name: 手动构建和发布

on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.26)'
        required: true
        type: string
      release_notes:
        description: '更新说明 (支持 Markdown 格式)'
        required: false
        type: string
        default: '- 手动发布版本'
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false
      draft:
        description: '是否创建草稿发布'
        required: false
        type: boolean
        default: false
      platforms:
        description: '构建平台 (多选用逗号分隔: x64,Win32,ARM64)'
        required: false
        type: string
        default: 'x64,Win32,ARM64'

permissions:
  contents: write
  actions: read
  checks: read

env:
  BUILD_CONFIGURATION: Release
  PROJECT_NAME: TinyPin

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: 验证和处理输入参数
        id: validate_inputs
        shell: pwsh
        run: |
          # 验证版本号格式
          $version = "${{ github.event.inputs.version }}"
          if ($version -notmatch '^\d+\.\d+\.\d+$') {
            Write-Error "版本号格式不正确，应为 x.y.z 格式 (例如: 1.0.26)"
            exit 1
          }
          
          # 处理平台列表
          $platformsInput = "${{ github.event.inputs.platforms }}"
          $validPlatforms = @("x64", "Win32", "ARM64")
          $selectedPlatforms = $platformsInput -split ',' | ForEach-Object { $_.Trim() }
          
          foreach ($platform in $selectedPlatforms) {
            if ($platform -notin $validPlatforms) {
              Write-Error "无效的平台: $platform。有效平台: $($validPlatforms -join ', ')"
              exit 1
            }
          }
          
          # 输出处理后的参数
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=v$version" >> $env:GITHUB_OUTPUT
          echo "platforms=$($selectedPlatforms -join ',')" >> $env:GITHUB_OUTPUT
          
          Write-Host "✓ 版本号: $version"
          Write-Host "✓ 构建平台: $($selectedPlatforms -join ', ')"
          Write-Host "✓ 预发布: ${{ github.event.inputs.prerelease }}"
          Write-Host "✓ 草稿: ${{ github.event.inputs.draft }}"

      - name: 检查标签是否已存在
        shell: pwsh
        run: |
          $tag = "${{ steps.validate_inputs.outputs.tag }}"
          
          # 检查本地标签
          $localTag = git tag -l $tag
          if ($localTag) {
            Write-Error "标签 $tag 已在本地存在"
            exit 1
          }
          
          # 检查远程标签
          git fetch --tags
          $remoteTag = git ls-remote --tags origin $tag
          if ($remoteTag) {
            Write-Error "标签 $tag 已在远程仓库存在"
            exit 1
          }
          
          Write-Host "✓ 标签 $tag 可用"

      - name: 创建构建目录
        shell: pwsh
        run: |
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          
          foreach ($platform in $platforms) {
            $dir = "build/compile/Release/$platform"
            if (!(Test-Path $dir)) {
              New-Item -ItemType Directory -Path $dir -Force | Out-Null
            }
            Write-Host "✓ 创建目录: $dir"
          }
          
          if (!(Test-Path "build/installer")) {
            New-Item -ItemType Directory -Path "build/installer" -Force | Out-Null
          }
          Write-Host "✓ 创建目录: build/installer"

      - name: 构建所有平台
        shell: pwsh
        run: |
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          
          foreach ($platform in $platforms) {
            Write-Host "🔨 构建 $platform 版本..."
            msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=$platform /p:OutDir="build\compile\Release\$platform\" /nologo /verbosity:minimal
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "$platform 版本构建失败"
              exit 1
            }
            
            $exePath = "build\compile\Release\$platform\TinyPin.exe"
            if (!(Test-Path $exePath)) {
              Write-Error "$platform 版本可执行文件未找到: $exePath"
              exit 1
            }
            
            Write-Host "✓ $platform 版本构建成功"
          }

      - name: 创建安装包
        shell: pwsh
        run: |
          $version = "${{ steps.validate_inputs.outputs.version }}"
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          $isccPath = "tools\InnoSetup6\ISCC.exe"
          $scriptPath = "tools\Scripts\TinyPin.iss"
          $outputDir = "build\installer"

          foreach ($platform in $platforms) {
            Write-Host "📦 创建 $platform 安装包..."
            $sourcePath = "build\compile\Release\$platform\TinyPin.exe"
            $relativeSourcePath = "..\..\build\compile\Release\$platform\TinyPin.exe"
            
            if (!(Test-Path $sourcePath)) {
              Write-Error "源文件不存在: $sourcePath"
              exit 1
            }
            
            $scriptOutputDir = "build\installer"
            & $isccPath $scriptPath /Dp=$platform /Ds=$relativeSourcePath /Do=$scriptOutputDir /Dv=$version
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "$platform 安装包创建失败"
              exit 1
            }
            
            # 移动安装包到最终位置
            $possibleVersions = @($version, "1.0.0")
            $scriptInstallerPath = $null
            
            foreach ($testVersion in $possibleVersions) {
              $testPath = "tools\Scripts\$scriptOutputDir\TinyPin-$testVersion-$platform-setup.exe"
              if (Test-Path $testPath) {
                $scriptInstallerPath = $testPath
                break
              }
            }
            
            $finalInstallerPath = "$outputDir\TinyPin-$version-$platform-setup.exe"
            
            if ($scriptInstallerPath -and (Test-Path $scriptInstallerPath)) {
              $targetDir = Split-Path $finalInstallerPath -Parent
              if (!(Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
              }
              Move-Item -Path $scriptInstallerPath -Destination $finalInstallerPath -Force
              
              if (!(Test-Path $finalInstallerPath)) {
                Write-Error "$platform 安装包移动失败"
                exit 1
              }
              
              Write-Host "✓ $platform 安装包创建成功"
            } else {
              Write-Error "$platform 安装包文件未找到"
              exit 1
            }
          }

      - name: 创建发布说明
        id: release_notes
        shell: pwsh
        run: |
          $version = "${{ steps.validate_inputs.outputs.version }}"
          $date = Get-Date -Format "yyyy年MM月dd日"
          $tagName = "v$version"
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          $customNotes = @"
          ${{ github.event.inputs.release_notes }}
          "@
          
          # 生成安装包下载列表
          $downloadList = ""
          foreach ($platform in $platforms) {
            $downloadList += "- **TinyPin-$version-$platform-setup.exe** - 适用于 "
            switch ($platform) {
              "x64" { $downloadList += "64 位 Windows 系统" }
              "Win32" { $downloadList += "32 位和 64 位 Windows 系统" }
              "ARM64" { $downloadList += "ARM64 Windows 系统" }
            }
            $downloadList += "`n"
          }
          
          $releaseNotes = @"
          ## TinyPin $version 发布
          
          **发布日期**: $date
          **标签**: $tagName
          **发布类型**: ${{ github.event.inputs.prerelease == 'true' && '预发布' || '正式发布' }}
          
          ### 📦 安装包下载
          
          $downloadList
          ### 🔧 系统要求
          
          - Windows 7 SP1 或更高版本
          - 对应的系统架构 (x64/x86/ARM64)
          
          ### 📝 更新内容
          
          $customNotes
          
          ### 🚀 安装说明
          
          1. 下载适合您系统架构的安装包
          2. 运行安装程序并按照提示完成安装
          3. 安装完成后可在开始菜单找到 TinyPin
          "@

          $releaseNotes | Out-File -FilePath "release_notes.md" -Encoding UTF8
          echo "notes_file=release_notes.md" >> $env:GITHUB_OUTPUT

      - name: 验证安装包
        shell: pwsh
        run: |
          $version = "${{ steps.validate_inputs.outputs.version }}"
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          $allFilesExist = $true

          foreach ($platform in $platforms) {
            $installerPath = "build\installer\TinyPin-$version-$platform-setup.exe"
            if (!(Test-Path $installerPath)) {
              Write-Error "$platform 安装包不存在: $installerPath"
              $allFilesExist = $false
            } else {
              Write-Host "✓ $platform 安装包验证通过"
            }
          }

          if (-not $allFilesExist) {
            Write-Error "部分安装包文件不存在，无法创建 Release"
            exit 1
          }

      - name: 创建 Git 标签
        shell: pwsh
        run: |
          $tag = "${{ steps.validate_inputs.outputs.tag }}"
          $version = "${{ steps.validate_inputs.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a $tag -m "Release $version"
          git push origin $tag
          
          Write-Host "✓ 创建并推送标签: $tag"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.validate_inputs.outputs.tag }}
          name: TinyPin ${{ steps.validate_inputs.outputs.version }}
          body_path: release_notes.md
          files: |
            build/installer/*.exe
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          fail_on_unmatched_files: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: TinyPin-${{ steps.validate_inputs.outputs.version }}-Installers-Manual
          path: |
            build/installer/*.exe
          retention-days: 30

      - name: 发布完成通知
        shell: pwsh
        run: |
          $version = "${{ steps.validate_inputs.outputs.version }}"
          $tag = "${{ steps.validate_inputs.outputs.tag }}"
          $platforms = "${{ steps.validate_inputs.outputs.platforms }}" -split ','
          
          Write-Host "🎉 TinyPin $version 手动发布完成！"
          Write-Host ""
          Write-Host "📦 生成的安装包："
          foreach ($platform in $platforms) {
            $installerPath = "build\installer\TinyPin-$version-$platform-setup.exe"
            if (Test-Path $installerPath) {
              $size = [math]::Round((Get-Item $installerPath).Length/1MB, 2)
              Write-Host "  - TinyPin-$version-$platform-setup.exe ($size MB)"
            }
          }
          
          Write-Host ""
          Write-Host "🚀 发布信息："
          Write-Host "  - 版本: $version"
          Write-Host "  - 标签: $tag"
          Write-Host "  - 预发布: ${{ github.event.inputs.prerelease }}"
          Write-Host "  - 草稿: ${{ github.event.inputs.draft }}"
          Write-Host "  - 构建平台: $($platforms -join ', ')"
          Write-Host ""
          Write-Host "🔗 发布页面: https://github.com/${{ github.repository }}/releases/tag/$tag"