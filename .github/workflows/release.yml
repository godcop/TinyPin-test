name: 自动构建和发布

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  actions: read
  checks: read

env:
  BUILD_CONFIGURATION: Release
  PROJECT_NAME: TinyPin

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: 获取版本信息
        id: version
        shell: pwsh
        run: |
          $tag = git describe --tags --abbrev=0 2>$null
          if ($tag) {
            $version = $tag -replace '^v', ''
          } else {
            $version = "1.0.$(Get-Date -Format 'yyyyMMdd')"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=v$version" >> $env:GITHUB_OUTPUT

      - name: 创建构建目录
        run: |
          mkdir -p build/compile/Release/x64
          mkdir -p build/compile/Release/Win32
          mkdir -p build/compile/Release/ARM64
          mkdir -p build/installer

      - name: 构建所有平台
        shell: pwsh
        run: |
          $platforms = @("x64", "Win32", "ARM64")
          foreach ($platform in $platforms) {
            msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=$platform /p:OutDir="build\compile\Release\$platform\" /nologo /verbosity:minimal
            if ($LASTEXITCODE -ne 0) {
              Write-Error "$platform 版本构建失败"
              exit 1
            }
            if (!(Test-Path "build\compile\Release\$platform\TinyPin.exe")) {
              Write-Error "$platform 版本可执行文件未找到"
              exit 1
            }
          }

      - name: 创建安装包
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $platforms = @("x64", "Win32", "arm64")
          $isccPath = "tools\InnoSetup6\ISCC.exe"
          $scriptPath = "tools\Scripts\TinyPin.iss"
          $outputDir = "build\installer"

          foreach ($platform in $platforms) {
            $sourcePath = "build\compile\Release\$platform\TinyPin.exe"
            $relativeSourcePath = "..\..\build\compile\Release\$platform\TinyPin.exe"
            
            if (!(Test-Path $sourcePath)) {
              Write-Error "源文件不存在: $sourcePath"
              exit 1
            }
            
            $scriptOutputDir = "build\installer"
            & $isccPath $scriptPath /Dp=$platform /Ds=$relativeSourcePath /Do=$scriptOutputDir /Dv=$version
            
            if ($LASTEXITCODE -ne 0) {
              Write-Error "$platform 安装包创建失败"
              exit 1
            }
            
            # 移动安装包到最终位置
            $possibleVersions = @($version, "1.0.0")
            $scriptInstallerPath = $null
            
            foreach ($testVersion in $possibleVersions) {
              $testPath = "tools\Scripts\$scriptOutputDir\TinyPin-$testVersion-$platform-setup.exe"
              if (Test-Path $testPath) {
                $scriptInstallerPath = $testPath
                break
              }
            }
            
            $finalInstallerPath = "$outputDir\TinyPin-$version-$platform-setup.exe"
            
            if ($scriptInstallerPath -and (Test-Path $scriptInstallerPath)) {
              $targetDir = Split-Path $finalInstallerPath -Parent
              if (!(Test-Path $targetDir)) {
                New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
              }
              Move-Item -Path $scriptInstallerPath -Destination $finalInstallerPath -Force
              
              if (!(Test-Path $finalInstallerPath)) {
                Write-Error "$platform 安装包移动失败"
                exit 1
              }
            } else {
              Write-Error "$platform 安装包文件未找到"
              exit 1
            }
          }

      - name: 创建发布说明
        id: release_notes
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $date = Get-Date -Format "yyyy年MM月dd日"
          $tagName = "v$version"

          # 获取提交记录
          $previousTag = git describe --tags --abbrev=0 --match "v*" HEAD^ 2>$null
          if ($previousTag) {
            $commitList = git log --pretty=format:"%s" "$previousTag..HEAD" 2>$null
          } else {
            $commitList = git log --pretty=format:"%s" 2>$null
          }

          if ($commitList) {
            $commits = ($commitList | ForEach-Object { "- $_" }) -join "`n"
          } else {
            $commits = "- 无更新说明"
          }

          $releaseNotes = @"
## TinyPin $version 发布

**发布日期**: $date
**标签**: $tagName

### 📦 安装包下载

- **TinyPin-$version-x64-setup.exe** - 适用于 64 位 Windows 系统
- **TinyPin-$version-Win32-setup.exe** - 适用于 32 位和 64 位 Windows 系统
- **TinyPin-$version-arm64-setup.exe** - 适用于 ARM64 Windows 系统

### 🔧 系统要求

- Windows 7 SP1 或更高版本
- 对应的系统架构 (x64/x86/ARM64)

### 📝 更新内容

$commits

### 🚀 安装说明

1. 下载适合您系统架构的安装包
2. 运行安装程序并按照提示完成安装
3. 安装完成后可在开始菜单找到 TinyPin
"@

          $releaseNotes | Out-File -FilePath "release_notes.md" -Encoding UTF8
          echo "notes_file=release_notes.md" >> $env:GITHUB_OUTPUT

      - name: 验证安装包
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $platforms = @("x64", "Win32", "arm64")
          $allFilesExist = $true

          foreach ($platform in $platforms) {
            $installerPath = "build\installer\TinyPin-$version-$platform-setup.exe"
            if (!(Test-Path $installerPath)) {
              Write-Error "$platform 安装包不存在: $installerPath"
              $allFilesExist = $false
            }
          }

          if (-not $allFilesExist) {
            Write-Error "部分安装包文件不存在，无法创建 Release"
            exit 1
          }

      - name: 创建 GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: TinyPin v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            build/installer/*.exe
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: TinyPin-${{ steps.version.outputs.version }}-Installers
          path: |
            build/installer/*.exe
          retention-days: 30
